##
## /etc/logstash/conf.d/20-api-rails-filter.conf
## logstash grok patterns to parse nginx api rails log
## 

##
## Example format from lograge gem
## 
## 2017-02-01 01:47:02.626 INFO method=GET path=/v9/orders 
## format=application/vnd.ticketevolution.api+json 
## controller=Api::V9::OrdersController action=index 
## status=200 duration=75.52 view=21.19 db=26.77 
## request_id=cd2206b2-47a5-476d-8f25-bd859dbff041 
## brokerage_name=[Sunshine Events] credential_type=ApiCredential 
## brokerage_id=1961 office_id= request_path=null 
## params={"page"=>"1", "per_page"=>"5", "state"=>"pending", "type"=>"Order"}
## (pid:19998) app023
##

## "per_page"=>"100", "updated_at.gte"=>"2017-01-19T21:13:41Z"
## per_page=100&updated_at.gte=2017-01-19T21:13:41Z

filter {
  if [app_name] =~ /api/ and [type] == "rails" {
    grok {
      ## this is actually the default value (true)
      break_on_match => true
      match => [
        ## potentially we could use kv 
        ## this matches lograge format
        'message', "%{TIMESTAMP_ISO8601:time_iso8601} %{NOTSPACE:facility} method=%{NOTSPACE:method} path=%{NOTSPACE:path} %{DATA:format} controller=%{NOTSPACE:controller} action=%{NOTSPACE:action} status=%{NOTSPACE:status} duration=%{NOTSPACE:duration} view=%{NOTSPACE:view} db=%{NOTSPACE:db} request_id=%{NOTSPACE:request_id} brokerage_name=\[%{DATA:brokerage_name}\] credential_type=%{NOTSPACE:credential_type} %{NOTSPACE:brokerage_id} %{NOTSPACE:office_id} request_path=%{NOTSPACE:request_path} params=\[\{%{DATA:params}\}\] \(pid:%{NOTSPACE:pid}\)",
        ## POST files
        'message', "%{TIMESTAMP_ISO8601:time_iso8601} %{NOTSPACE:facility} method=%{NOTSPACE:method} path=%{NOTSPACE:path} %{DATA:format} controller=%{NOTSPACE:controller} action=%{NOTSPACE:action} status=%{NOTSPACE:status} duration=%{NOTSPACE:duration} view=%{NOTSPACE:view} db=%{NOTSPACE:db} request_id=%{NOTSPACE:request_id} request_path=%{NOTSPACE:request_path} http_referer=%{NOTSPACE:http_referer} params=\[\{%{DATA:params}\}\] \(pid:%{NOTSPACE:pid}\)",
        ## 302 redirects
        'message', "%{TIMESTAMP_ISO8601:time_iso8601} %{NOTSPACE:facility} method=%{NOTSPACE:method} path=%{NOTSPACE:path} %{DATA:format} controller=%{NOTSPACE:controller} action=%{NOTSPACE:action} status=%{NOTSPACE:status} duration=%{NOTSPACE:duration} view=%{NOTSPACE:view} db=%{NOTSPACE:db} location=%{NOTSPACE:location} request_id=%{NOTSPACE:request_id} request_path=%{NOTSPACE:request_path} http_referer=%{NOTSPACE:http_referer} params=\[\{%{DATA:params}\}\] \(pid:%{NOTSPACE:pid}\)",
        ## 401
        'message', "%{TIMESTAMP_ISO8601:time_iso8601} %{NOTSPACE:facility} method=%{NOTSPACE:method} path=%{NOTSPACE:path} %{DATA:format} controller=%{NOTSPACE:controller} action=%{NOTSPACE:action} status=%{NOTSPACE:status} duration=%{NOTSPACE:duration} view=%{NOTSPACE:view} db=%{NOTSPACE:db} request_id=%{NOTSPACE:request_id} request_path=%{NOTSPACE:request_path} params=\[\{%{DATA:params}\}\] \(pid:%{NOTSPACE:pid}\)",
        ## errors, catch several different formats here
        'message', "%{TIMESTAMP_ISO8601:time_iso8601} %{NOTSPACE:facility} %{DATA:view_runtime} db_runtime=%{DATA:db_runtime} http_x_token=%{DATA:http_x_token} request_path=%{DATA:request_path} query_string=%{DATA:query_string} x_token=%{DATA:x_token} request_id=%{DATA:request_id} error_type=%{NOTSPACE:error_type} message=\[%{DATA:message}\] \(pid:%{DATA:pid}\) %{NOTSPACE:node}",
        'message', "%{TIMESTAMP_ISO8601:time_iso8601} %{NOTSPACE:facility} %{DATA:view_runtime} db_runtime=%{DATA:db_runtime} http_x_token=%{DATA:http_x_token} request_path=%{DATA:request_path} query_string=%{DATA:query_string} x_token=%{DATA:x_token} request_id=%{DATA:request_id} credential_type=%{DATA:credential_type} brokerage_name=\[%{DATA:brokerage_name}\] brokerage_id=%{DATA:brokerage_id} %{NOTSPACE:office_id} error_type=%{DATA:error_type} message=\[%{DATA:message}\] \(pid:%{DATA:pid}\)",
        'message', "%{TIMESTAMP_ISO8601:time_iso8601} %{NOTSPACE:facility} %{DATA:view_runtime} db_runtime=%{DATA:db_runtime} http_x_token=%{DATA:http_x_token} request_path=%{DATA:request_path} query_string=%{DATA:query_string} x_token=%{DATA:x_token} request_id=%{DATA:request_id} error_type=%{DATA:error_type} message=\[%{DATA:message}\] \(pid:%{DATA:pid}\)"

      ]
    }

    ## if this is present @timestamp will match time_iso8601
    date { match => [ "time_iso8601", "ISO8601" ] }

    ## some of these will be empty strings
    mutate {
      gsub => [ format, "^format=", "" ]
      gsub => [ brokerage_id, "^brokerage_id=", "" ]
      gsub => [ office_id, "^office_id=", "" ]
      gsub => [ view_runtime, "^view_runtime=", "" ]
    }

    mutate {
      ## capture everything initially as sting, then type
      convert => { 'status' => 'integer' }
      convert => { 'duration' => 'float' }
      convert => { 'view' => 'float' }
      convert => { 'db' => 'float' }
      convert => { 'pid' => 'integer' }
    }
  }
}
