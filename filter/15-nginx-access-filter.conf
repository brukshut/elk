##
## /etc/logstash/conf.d/15-nginx-access-filter.conf
## logstash grok patterns to parse nginx access.log
## 

##
## nginx log format
## $time_iso8601 $msec $http_x_forwarded_for
## $http_x_forwarded_proto $request_method $host $uri
## $query_string $status $bytes_sent $request_length
## $request_time $upstream_htp_x_runtime [$http_user_agent]
##
filter {
  if [type] == "nginx" and [app_name] == "myapp" {
    grok {
      match => [
        'message', "%{TIMESTAMP_ISO8601:time_iso8601} %{DATA:msec} \[%{DATA:x_forwarded_for}\] %{DATA:x_forwarded_proto} %{DATA:request_method} %{NOTSPACE:hostname} %{NOTSPACE:uri} %{DATA:query_string} %{NOTSPACE:status} %{DATA:body_bytes_sent} %{DATA:request_length} %{DATA:request_time} %{DATA:x_runtime} \[%{DATA:user_agent}\]"
      ]
    }
    ## if this is present @timestamp will match time_iso8601
    date { match => [ "time_iso8601", "ISO8601" ] }

    ## varnish requests have multiple ip addresses in x_forwarded_for
    ## we need to split these and set the left most value to client_ip
    mutate {
      split     => { 'x_forwarded_for' => ',' }
      add_field => { 'client_ip' => "%{x_forwarded_for[0]}" }
    }   
    ## ensure geoip can handle empty dashes, replace dash with load balancer ip
    ## geoip lookup will fail but it will not produce a logstash error
    mutate {
      gsub => [ 'client_ip', "^-$", '10.0.0.5' ]
    }
    ## now we can safely perform geoip lookups
    geoip {
      source    => 'client_ip'
      target    => 'geoip'
      add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
      add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}" ]      
    }
    mutate {   
      ## convert empty dashes in fields to string 'null'
      gsub => [ 'msec', "^-$", null ]
      gsub => [ 'x_forwarded_for', "^-$", null ]
      gsub => [ 'x_forwarded_proto', "^-$", null ]
      gsub => [ 'hostname', "^-$", null ]
      gsub => [ 'uri', "^-$", null ]
      gsub => [ 'query_string', "^-$", null ]
      gsub => [ 'status', "^-$", null ]
      gsub => [ 'body_bytes_sent', "^-$", null ]
      gsub => [ 'request_length', "^-$", null ]
      gsub => [ 'request_time', "^-$", null ]
      gsub => [ 'x_runtime', "^-$", null ]
      gsub => [ 'user_agent', "^-$", null ]
      ## geoip fields
      gsub => [ 'geoip.city_name', "^-$", null ]
      gsub => [ 'geoip.continent_code', "^-$", null ]
      gsub => [ 'geoip.coordinates', "^-$", null ]
      gsub => [ 'geoip.country_code2', "^-$", null ]
      gsub => [ 'geoip.country_code3', "^-$", null ]
      gsub => [ 'geoip.country_name', "^-$", null ]
      gsub => [ 'geoip.dma_code', "^-$", null ]
      gsub => [ 'geoip.ip', "^-$", null ]
      gsub => [ 'geoip.latitude', "^-$", null ]
      gsub => [ 'geoip.location', "^-$", null ]
      gsub => [ 'geoip.longitude', "^-$", null ]
      gsub => [ 'geoip.postal_code', "^-$", null ]
      gsub => [ 'geoip.region_code', "^-$", null ]
      gsub => [ 'geoip.region_name', "^-$", null ]
      gsub => [ 'geoip.timezone', "^-$", null ]

      ## capture everything initially as sting, then type
      convert => { 'msec' => 'float' }
      convert => { 'status' => 'integer' }
      convert => { 'body_bytes_sent' => 'integer' }
      convert => { 'request_length' => 'integer' }
      convert => { 'request_time' => 'float' }
      convert => { 'x_runtime' => 'float' }
    }
  }
}
