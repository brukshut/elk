##
## /etc/logstash/conf.d/11-lb-filter.conf
## logstash filter for lb access logs
##
filter {
  ## logstash tails lb access logs
  ## we filter based on path
  if [path] =~ /api/ {
    grok {
      break_on_match => true
      match => [
        'message',"%{TIMESTAMP_ISO8601:time_iso8601} %{DATA:msec} %{NOTSPACE:vserver} %{NOTSPACE:pool} %{NOTSPACE:node} %{NOTSPACE:node_ip} %{NOTSPACE:client_ip} %{INT:port:integer} \[%{DATA:x_forwarded_for}\] %{DATA:x_forwarded_proto} %{NOTSPACE:hostname} %{DATA:method} %{NOTSPACE:uri} %{DATA:query_string} %{NOTSPACE:status} %{BASE10NUM:bytes_received} %{BASE10NUM:bytes_sent} %{BASE10NUM:client_rt} %{DATA:node_rt} %{DATA:x_runtime} \[%{DATA:authentication_token}\] \[%{DATA:x_token}\] \[%{DATA:x_signature}\] \[%{DATA:user_agent}\] \[%{DATA:x_brokerage}\] \[%{DATA:x_cred_label}\] \[%{DATA:x_cred_type}\]"
      ]
    }
    date { match => [ "time_iso8601", "ISO8601" ] }
    ## perform geoip lookups on client_ip
    geoip {
      source => 'client_ip'
      target => 'geoip'
      add_field => [ "[geoip][coordinates]", "%{[geoip][longitude]}" ]
      add_field => [ "[geoip][coordinates]", "%{[geoip][latitude]}" ]      
    }
    mutate {   
      ## copy uri into new field called endpoint
      add_field => [ 'endpoint', "%{uri}" ]
    }
    mutate {
      ## convert empty dashes in fields to null
      ## we do this before we type these fields
      gsub => [ 'msec', "^-$", null ]
      gsub => [ 'vserver', "^-$", null ]
      gsub => [ 'pool', "^-$", null ]
      gsub => [ 'node', "^-$", null ]
      gsub => [ 'node_ip', "^-$", null ]
      gsub => [ 'x_forwarded_for', "^-$", null ]
      gsub => [ 'x_forwarded_proto', "^-$", null ]
      gsub => [ 'hostname', "^-$", null ]
      gsub => [ 'method', "^(-| )$", null ]
      gsub => [ 'uri', "^-$", null ]
      gsub => [ 'query_string', "^-$", null ]
      gsub => [ 'status', "^-$", null ]
      gsub => [ 'bytes_sent', "^-$", null ]
      gsub => [ 'bytes_received', "^-$", null ]
      gsub => [ 'client_rt', "^-$", null ]
      gsub => [ 'node_rt', "^-$", null ]
      gsub => [ 'x_runtime', "^-$", null ]
      gsub => [ 'authentication_token', "^-$", null ]
      gsub => [ 'x_token', "^-$", null ]
      gsub => [ 'x_signature', "^-$", null ]
      gsub => [ 'user_agent', "^-$", null ]
      gsub => [ 'x_brokerage', "^-$", null ]
      gsub => [ 'x_cred_label', "^-$", null ]
      gsub => [ 'x_cred_type', "^-$", null ]
      gsub => [ 'endpoint', "^-$", null ]
      gsub => [ 'geoip.city_name', "^-$", null ]
      gsub => [ 'geoip.continent_code', "^-$", null ]
      gsub => [ 'geoip.coordinates', "^-$", null ]
      gsub => [ 'geoip.country_code2', "^-$", null ]
      gsub => [ 'geoip.country_code3', "^-$", null ]
      gsub => [ 'geoip.country_name', "^-$", null ]
      gsub => [ 'geoip.dma_code', "^-$", null ]
      gsub => [ 'geoip.ip', "^-$", null ]
      gsub => [ 'geoip.latitude', "^-$", null ]
      gsub => [ 'geoip.location', "^-$", null ]
      gsub => [ 'geoip.longitude', "^-$", null ]
      gsub => [ 'geoip.postal_code', "^-$", null ]
      gsub => [ 'geoip.region_code', "^-$", null ]
      gsub => [ 'geoip.region_name', "^-$", null ]
      gsub => [ 'geoip.timezone', "^-$", null ]

      ## we capture everything as a string initially, then we type
      convert => { 'msec' => 'float' }
      convert => { 'port' => 'integer' }
      convert => { 'status' => 'integer' }
      convert => { 'bytes_sent' => 'integer' }
      convert => { 'bytes_received' => 'integer' }
      convert => { 'client_rt' => 'float' }
      convert => { 'node_rt' => 'float' }
      convert => { 'x_runtime' => 'float' }

      ## similar requests to api endpoints together to allow us to easily
      ## create visualizations.  
      ##
      ## This is done by making a copy of the 'uri' field for each request into 
      ## a new field called 'endpoint'. We then perform transformations of 
      ## the string in the 'endpoint' field into generic strings.  For example:
      ##
      ## uri: /v9/venues/23345                    endpoint: /v9/venues/id
      ## uri: /v9/venues/1122344                  endpoint: /v9/venues/id
      ## uri: /v9/orders/23345/deliver_etickets   endpoint: /v9/orders/id/deliver_etickets
      ## uri: /v9/venues/yankees-stadium          endpoint: /v9/venues/name
      ## 
      ## This lets us easily construct lucene queries using the 'endpoint' field:
      ## 
      ## endpoint:/v9/venues/id
      ## endpoint:/v9/performers/name 
      ##     
      ## match any category name except deleted endpoint
      gsub => [ 'endpoint', "/v9/categories/(?!deleted$)([a-zA-Z\-]|[0-9])*[a-zA-Z\-]+([a-zA-Z\-]|[0-9])*$", '/v9/categories/name' ]

      ## match any performer name except search and deleted
      gsub => [ 'endpoint', "/v9/performers/(?!(search|deleted)$)([a-zA-Z\-]|[0-9])*[a-zA-Z\-]+([a-zA-Z\-]|[0-9])*$", '/v9/performers/name' ]

      ## match any venue name except search and deleted
      gsub => [ 'endpoint', "/v9/venues/(?!(search|deleted)$)([a-zA-Z\-]|[0-9])*[a-zA-Z\-]+([a-zA-Z\-]|[0-9])*$", '/v9/venues/name' ]
      ## works for venues, configurations, users, tickets, ticket_groups
      ## /v9/(venues|configurations|users|tickets)/id
      gsub => [ 'endpoint', "/[0-9\-]+", '/id' ]
    }
  }
}
